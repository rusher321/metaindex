use_r("alpha")
library(testthat)
??use_r
library(usethis)
use_r("alpha")
library(vean)
library(vegan)
vegan::diversity
library(curatedMetagenomicData)
curatedMetagenomicData("JieZ_2017.+")
curatedMetagenomicData("curatedMetagenomicData("JieZ_2017.+")")
curatedMetagenomicData("2021-10-14.JieZ_2017.relative_abundance")
curatedMetagenomicData("2021-10-14.JieZ_2017.relative_abundance", dryrun = T)
curatedMetagenomicData("2021-10-14.JieZ_2017.relative_abundance", dryrun = F)
## here down jie's 17 metagenome data
jie <- curatedMetagenomicData("2021-10-14.JieZ_2017.relative_abundance", dryrun = F)
jie$`2021-10-14.JieZ_2017.relative_abundance`
pro <- jie$`2021-10-14.JieZ_2017.relative_abundance`
pro$`k__Bacteria|p__Bacteroidetes|c__Bacteroidia|o__Bacteroidales|f__Bacteroidaceae|g__Bacteroides|s__Bacteroides_dorei`
assay(jie)
assay(jie[[1]])
pro <- assay(jie[[1]])
head(pro)
head(pro)[,1:5]
rownames(pro)[,1:5]
rownames(pro)[1:5]
## metadata
samples <- curatedMetagenomicData::sampleMetadata
head(samples)
testData <- samples[samples$study_name == "JieZ_2017", ]
rownames(testData) <- testData$sample_id
head(testDate)
head(testData)
alpha
diversity
exp(1)
library(vegan)
diversity
?decostand
data(varespec)
sptrans <- decostand(varespec, "max")
apply(sptrans, 2, max)
sptrans <- wisconsin(varespec)
# CLR transformation for rows, with pseudocount
varespec.clr <- decostand(varespec, "clr", pseudocount=1)
# ALR transformation for rows, with pseudocount and reference sample
varespec.alr <- decostand(varespec, "alr", pseudocount=1, reference=1)
## Chi-square: PCA similar but not identical to CA.
## Use wcmdscale for weighted analysis and identical results.
sptrans <- decostand(varespec, "chi.square")
plot(procrustes(rda(sptrans), cca(varespec)))
match.arg("a", c("a", "b"))
match.arg("c", c("a", "b"))
decostand
?diversity
data(BCI, BCI.env)
H <- diversity(BCI)
head(BCI)
x <- BCI
total <- apply(x, 1, sum, na.rm = T)
total
x <- sweep(x, 1, total, "/")
x
apply(x, 1 , sum)
diversity
x
vegdist(x)
as.matrix(vegdist(x)) -> a
head(a)
?vegdist
as.matrix(vegdist(x)) -> a
apply(x,2, sort)
apply(a, 2, sort)
apply(a, 2, sort)[2,]
?vegdist
decostand(x, method = "clr")
?decostand
decostand(x, method = "clr", pseudocount = 0.0001)
min_x <- min(x[x!=0])
x[x==0] <- min_x
decostand(x, method = "clr", pseudocount = 0)
decostand(x, method = "clr")
decostand(x, method = "clr", 0)
decostand(x, method = "clr")
?vegdist
library(pcaPP)
?cor.fk
n <- 1000
x <- rnorm (n)
y <- x+  rnorm (n)
head(x)
x
y
cor.fk (x, y)
cor (x, y, method = "kendall")
diversity
invsimpson <- function(x){
total <- apply(x, 1, sum, na.rm = T)
x <- sweep(x, 1, total, "/")
x <- x*x
H <- apply(x, 1, sum, na.rm = T)
simp <- 1/H
return(simp)
}
uniqness_bray <- function(x, lev = "min"){
bray_dist <- as.matrix(vegan::vegdist(x, method = "bray"))
bray_sort <- apply(bray_dist, 2, sort)
if(lev = "min")
bray_uniq <- bray_sort[2, ]
else
index <- round(nrwo(x)*lev, 0)
bray_uniq <- bray_sort[index, ]
return(bray_uniq)
}
uniqness_jaccard <- function(x, lev = "min"){
jac_dist <- as.matrix(vegan::vegdist(x, method = "jaccard"))
jac_sort <- apply(jac_dist, 2, sort)
if(lev = "min")
jac_uniq <- jac_sort[2, ]
else
index <- round(nrwo(x)*lev, 0)
jac_uniq <- jac_sort[index, ]
return(bray_uniq)
}
uniqness_aitchison <- function(x, lev = "min"){
### clr transformed
total <- apply(x, 1, sum, na.rm = T)
x <- sweep(x, 1, total, "/")
min_x <- min(x[x!=0])
x[x==0] <- min_x
x_clr <- vegan::decostand(x, method = "clr", pseudocount = 0)
### distance
ait_dist <- as.matrix(vegan::vegdist(x_clr, method = "euclidean"))
ait_sort <- apply(ait_dist, 2, sort)
if(lev = "min")
ait_uniq <- ait_sort[2, ]
else
index <- round(nrwo(x)*lev, 0)
ait_uniq <- ait_sort[index, ]
return(ait_uniq)
}
uniqness_kendall <- function(x, lev = "min", clr = T){
total <- apply(x, 1, sum, na.rm = T)
x <- sweep(x, 1, total, "/")
if(clr){
min_x <- min(x[x!=0])
x[x==0] <- min_x
x_clr <- vegan::decostand(x, method = "clr", pseudocount = 0)
kendel_uniq <- 1-pcaPP::cor.fk(x_clr)
}else{
kendel_uniq <- 1-pcaPP::cor.fk(x)
}
kendel_sort <- apply(kendel_uniq, 2, sort)
if(lev = "min")
kendel_uniq <- kendel_sort[2, ]
else
index <- round(nrwo(x)*lev, 0)
kendel_uniq <- kendel_sort[index, ]
return(kendel_uniq)
}
uniqness_bray <- function(x, lev = "min"){
bray_dist <- as.matrix(vegan::vegdist(x, method = "bray"))
bray_sort <- apply(bray_dist, 2, sort)
if(lev = "min")
bray_uniq <- bray_sort[2, ]
else
index <- round(nrwo(x)*lev, 0)
bray_uniq <- bray_sort[index, ]
return(bray_uniq)
}
uniqness_bray <- function(x, lev = "min"){
bray_dist <- as.matrix(vegan::vegdist(x, method = "bray"))
bray_sort <- apply(bray_dist, 2, sort)
if(lev = "min"){
bray_uniq <- bray_sort[2, ]
}else{
index <- round(nrwo(x)*lev, 0)
bray_uniq <- bray_sort[index, ]
}
return(bray_uniq)
}
uniqness_bray <- function(x, lev = "min"){
bray_dist <- as.matrix(vegan::vegdist(x, method = "bray"))
bray_sort <- apply(bray_dist, 2, sort)
if(lev == "min"){
bray_uniq <- bray_sort[2, ]
}else{
index <- round(nrwo(x)*lev, 0)
bray_uniq <- bray_sort[index, ]
}
return(bray_uniq)
}
uniqness_jaccard <- function(x, lev = "min"){
jac_dist <- as.matrix(vegan::vegdist(x, method = "jaccard"))
jac_sort <- apply(jac_dist, 2, sort)
if(lev == "min")
jac_uniq <- jac_sort[2, ]
else
index <- round(nrwo(x)*lev, 0)
jac_uniq <- jac_sort[index, ]
return(bray_uniq)
}
uniqness_aitchison <- function(x, lev = "min"){
### clr transformed
total <- apply(x, 1, sum, na.rm = T)
x <- sweep(x, 1, total, "/")
min_x <- min(x[x!=0])
x[x==0] <- min_x
x_clr <- vegan::decostand(x, method = "clr", pseudocount = 0)
### distance
ait_dist <- as.matrix(vegan::vegdist(x_clr, method = "euclidean"))
ait_sort <- apply(ait_dist, 2, sort)
if(lev == "min")
ait_uniq <- ait_sort[2, ]
else
index <- round(nrwo(x)*lev, 0)
ait_uniq <- ait_sort[index, ]
return(ait_uniq)
}
uniqness_kendall <- function(x, lev = "min", clr = T){
total <- apply(x, 1, sum, na.rm = T)
x <- sweep(x, 1, total, "/")
if(clr){
min_x <- min(x[x!=0])
x[x==0] <- min_x
x_clr <- vegan::decostand(x, method = "clr", pseudocount = 0)
kendel_uniq <- 1-pcaPP::cor.fk(x_clr)
}else{
kendel_uniq <- 1-pcaPP::cor.fk(x)
}
kendel_sort <- apply(kendel_uniq, 2, sort)
if(lev == "min")
kendel_uniq <- kendel_sort[2, ]
else
index <- round(nrwo(x)*lev, 0)
kendel_uniq <- kendel_sort[index, ]
return(kendel_uniq)
}
uniquess_bray <- function(x, lev = "min"){
bray_dist <- as.matrix(vegan::vegdist(x, method = "bray"))
bray_sort <- apply(bray_dist, 2, sort)
if(lev == "min"){
bray_uniq <- bray_sort[2, ]
}else{
index <- round(nrwo(x)*lev, 0)
bray_uniq <- bray_sort[index, ]
}
return(bray_uniq)
}
uniquess_jaccard <- function(x, lev = "min"){
jac_dist <- as.matrix(vegan::vegdist(x, method = "jaccard"))
jac_sort <- apply(jac_dist, 2, sort)
if(lev == "min")
jac_uniq <- jac_sort[2, ]
else
index <- round(nrwo(x)*lev, 0)
jac_uniq <- jac_sort[index, ]
return(bray_uniq)
}
uniquess_aitchison <- function(x, lev = "min"){
### clr transformed
total <- apply(x, 1, sum, na.rm = T)
x <- sweep(x, 1, total, "/")
min_x <- min(x[x!=0])
x[x==0] <- min_x
x_clr <- vegan::decostand(x, method = "clr", pseudocount = 0)
### distance
ait_dist <- as.matrix(vegan::vegdist(x_clr, method = "euclidean"))
ait_sort <- apply(ait_dist, 2, sort)
if(lev == "min")
ait_uniq <- ait_sort[2, ]
else
index <- round(nrwo(x)*lev, 0)
ait_uniq <- ait_sort[index, ]
return(ait_uniq)
}
uniquess_kendall <- function(x, lev = "min", clr = T){
total <- apply(x, 1, sum, na.rm = T)
x <- sweep(x, 1, total, "/")
if(clr){
min_x <- min(x[x!=0])
x[x==0] <- min_x
x_clr <- vegan::decostand(x, method = "clr", pseudocount = 0)
kendel_uniq <- 1-pcaPP::cor.fk(x_clr)
}else{
kendel_uniq <- 1-pcaPP::cor.fk(x)
}
kendel_sort <- apply(kendel_uniq, 2, sort)
if(lev == "min")
kendel_uniq <- kendel_sort[2, ]
else
index <- round(nrwo(x)*lev, 0)
kendel_uniq <- kendel_sort[index, ]
return(kendel_uniq)
}
?diversity
load_all()
library(devtools)
load_all()
check()
check()
check()
check()
check()
check()
use_mit_license()
check()
